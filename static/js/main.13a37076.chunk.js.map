{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","input","this","setState","Component","App","OnRequestRobots","searchField","onSearchChange","isPending","filteredrobot","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.13a37076.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card =({name,email,id}) => {\r\n\t// const {name,email,id}=props\r\nreturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t<img alt =\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h1> {name}</h1>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\t// const CardArray=robots.map( (user,i) => {\r\n\t// \treturn (\r\n\t// \t\t<Card id={robots[i].id} \r\n\t// \t\tname={robots[i].name} \r\n\t// \t\temail={robots[0].email} />\r\n\t// \t\t)\r\n\t// }\r\n\t// )\r\n\r\n// if (true){\r\n// \tthrow new Error('NOOOOOOO')\r\n// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t  {\r\n\t\t  // {CardArray}\r\n\t\t  robots.map( (user,i) => {\r\n\t\t  \treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i}\r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email} />\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t  }\r\n\t  \t</div>\r\n\t\t);\r\n\r\n\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\n\r\nconst SearchBox =({searchChange}) =>{\r\n\r\n\treturn (\r\n\r\n\t\t<div className='pa2'>\r\n\t\t<input\r\n\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange ={searchChange}\r\n\r\n\t\t />\r\n\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n\tconsole.log(props)\r\n\r\nreturn( \r\n\t<div style={{overflow:'scroll', border: '5px solid black' ,height:'800px'}}>\r\n\t{props.children}\r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default Scroll;","import React,{Component}  from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error,input){\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> Ooops . That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children \r\n\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n// import {robots} from './robots.js'\r\nimport './App.css'\r\n\r\nimport {setSearchField,requestRobots} from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\tonSearchChange:(event => dispatch(setSearchField(event.target.value))),\r\n\tOnRequestRobots:() => dispatch(requestRobots())\r\n\t}\r\n}\r\nclass App extends Component {\r\n\t// constructor (){\r\n\t// \tsuper()\r\n\t// \tthis.state={\r\n\t// \t\trobots: [],\r\n\t// \t\t// searchfield:''\r\n\r\n\r\n\t// \t}\r\n\t// \t// console.log(\"constructor\")\r\n\t// }\r\n\r\n\r\ncomponentDidMount(){\r\n\t// console.log(this.props.store.getState())\r\n\r\n\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t// .then(response => {\r\n\t// \treturn response.json();\r\n\t// })\r\n\t// .then(users => {\r\n\t// \tthis.setState({robots: users } )\r\n\t// })\r\n\tthis.props.OnRequestRobots();\r\n\r\n\t// console.log('componentDidMount')\r\n}\r\n// onSearchChange = (event) => {\r\n\r\n// \tthis.setState({searchfield: event.target.value})\r\n\r\n\r\n// }\r\n\trender(){\r\n\r\n\t\t// const {robots} =this.state\r\n\t\tconst {searchField,onSearchChange,robots,isPending} =this.props\r\nconst filteredrobot=robots.filter( robot =>{\r\n\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n})\r\n\r\nif (isPending) {\r\n\treturn <h1> loading</h1>\r\n}else{\r\n\r\n\r\n// console.log(filteredrobot)\r\n// console.log('render')\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RobotFriends</h1>\r\n\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t  <CardList robots={filteredrobot}/>\r\n\t\t\t  </ErrorBoundary>\r\n\t\t\t </Scroll>\r\n\r\n\t\t\t  </div>\r\n\t\t\t);\r\n\r\n}\r\n}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField =(text) => {\r\n\t// console.log(text)\r\n\treturn{\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n}\r\n}\r\n\r\nexport const requestRobots = ()=>(dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => {return response.json();\t})\r\n\t.then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t.catch(error=> dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch ={\r\n\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots =( state=initialStateSearch,action={}) => {\r\n\t// console.log(action.type)\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{searchField:action.payload})\r\n\t\t// return {..state,{searchField:action.payload}}\r\n\t\tdefault:\r\n\t\treturn state\r\n\t}\r\n}\r\nconst initialStateRobots ={\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots =(state=initialStateRobots,action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\r\n\t\treturn Object.assign({},state,{isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({},state,{robots: action.payload,isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({},state,{error: action.payload,isPending: false})\r\n\t\tdefault:\r\n\t\treturn state\r\n\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider,connect} from 'react-redux'\nimport {createStore,applyMiddleware,combineReducers} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots,requestRobots} from './reducers'\nimport 'tachyons';\n\nconst logger=createLogger()\nconst rootReducer =combineReducers({searchRobots,requestRobots})\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n<Provider store = {store}>\t\n<App  />\n</Provider>\n // <CardList robots={robots}/>\n  ,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}